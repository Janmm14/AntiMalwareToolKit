package optic_fusion1.antimalwaretoolkit.tool.impl;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.apache.commons.io.IOUtils;

public class SpigotPluginDownloader extends Tool {

  @Override
  public void run(List<String> args) {
    int startingPage = 0;
    String url = "https://api.spiget.org/v2/resources?size=10&page=";
    if (args.size() == 1) {
      if (args.get(0).equalsIgnoreCase("latest")) {
        url = "https://api.spiget.org/v2/resources/free?sort=-updateDate&fields=file,name,version&page=";
      } else {
        startingPage = Integer.parseInt(args.get(0));
      }
    }
    System.out.println("Starting downloader");
    for (int page = startingPage; page < Integer.MAX_VALUE; page++) {
      System.out.println("Downloading a new spiget page");
      boolean success = downloadPage(url, page);
      if (!success) {
        break;
      }
    }

    File[] files = new File("data/plugins").listFiles();
    for (File file : files) {
      BufferedReader br = null;
      try {
        br = new BufferedReader(new FileReader(file.toString()));
        if (br.readLine() == null) {
          file.delete();
        }
      } catch (FileNotFoundException ex) {
        ex.printStackTrace();
      } catch (IOException ex) {
        ex.printStackTrace();
      } finally {
        try {
          br.close();
        } catch (IOException ex) {
          ex.printStackTrace();
        }
      }
    }

    System.out.println("Done");
  }

  private boolean downloadPage(String url, int currentPage) {
    String urlString = url + currentPage;
    System.out.println("Downloading the page: " + urlString);
    String jsonString = "";
    try {
      jsonString = IOUtils.toString(new URL(urlString), "UTF-8");
    } catch (IOException ex) {
      Logger.getLogger(SpigotPluginDownloader.class.getName()).log(Level.SEVERE, null, ex);
    }
    if (jsonString.isEmpty() || jsonString.equalsIgnoreCase("[]")) {
      System.out.println("Max page reached");
      return false;
    }
    for (JsonElement element : JsonParser.parseString(jsonString).getAsJsonArray()) {
      JsonObject jsonObject = element.getAsJsonObject();
      if (jsonObject == null) {
        System.out.println("Found a null plugin");
        continue;
      }
      JsonObject pluginInformation = jsonObject.getAsJsonObject();
      JsonObject pluginFileInformation = pluginInformation.getAsJsonObject("file");
      String fileType = pluginFileInformation == null ? ".jar" : pluginFileInformation.get("type").getAsString();
      if (fileType.equals("external") || fileType.equals("skript") || fileType.equals("sk")) {
        continue;
      }
      double fileSize = 0;
      try {
        fileSize = pluginFileInformation.get("size").getAsDouble();
      } catch (NullPointerException e) {
        continue;
      }
      if (fileSize == 0) {
        continue;
      }
      String id = pluginInformation.get("id").getAsString().replaceAll("\\.", "");
      String name = pluginInformation.get("name").getAsString();
      System.out.println("Downloading " + name + "(" + id + ")");
      File output = new File("data/plugins/" + name.replaceAll("[^a-zA-Z]", "") + "(" + id + ")" + fileType);
      if (!output.exists()) {
        output.getParentFile().mkdirs();
        try {
          output.createNewFile();
        } catch (IOException ex) {
          continue;
        }
      }
      download(id, output);
      System.out.println("Downloaded " + name + "(" + id + ") File Type: " + fileType + " Output: " + output);
    }
    return true;
  }

  private void download(String resourceID, File output) {
    try {
      URL url = new URL("http://aqua.api.spiget.org/v2/resources/" + resourceID + "/download");
      HttpURLConnection conn = (HttpURLConnection) url.openConnection();
      conn.setRequestProperty("User-Agent", "Optic_Fusion1 Antimalware");
      conn.setRequestMethod("GET");

      try (InputStream in = conn.getInputStream(); FileOutputStream out = new FileOutputStream(output)) {
        byte[] b = new byte[1024];
        int n = in.read(b);
        while (n != -1) {
          out.write(b, 0, n);
          n = in.read(b);
        }
      }
    } catch (IOException e) {
      output.delete();
    }
  }

  @Override
  public String getDescription() {
    return "Downloads every spigot plugin";
  }

}
