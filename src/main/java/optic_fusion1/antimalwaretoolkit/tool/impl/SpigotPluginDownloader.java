package optic_fusion1.antimalwaretoolkit.tool.impl;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.apache.commons.io.IOUtils;

public class SpigotPluginDownloader extends Tool {

  @Override
  public void run(String[] args) {
    recursiveDownload("https://api.spiget.org/v2/resources?size=10&page=", 3128);
    File[] files = new File("data/plugins").listFiles();
    for (File file : files) {
      BufferedReader br = null;
      try {
        br = new BufferedReader(new FileReader(file.toString()));
        if (br.readLine() == null) {
          file.delete();
        }
      } catch (FileNotFoundException ex) {
        ex.printStackTrace();
      } catch (IOException ex) {
        ex.printStackTrace();
      } finally {
        try {
          br.close();
        } catch (IOException ex) {
          ex.printStackTrace();
        }
      }
    }
  }

  private void recursiveDownload(String url, int currentPage) {
    String urlString = url + currentPage;
    System.out.println("Downloading the current page: " + urlString);
    try {
      String jsonString = IOUtils.toString(new URL(urlString), "UTF-8");
      if (jsonString.isEmpty() || jsonString.equalsIgnoreCase("[]")) {
        return;
      } else {
        try {
          JsonParser parser = new JsonParser();
          JsonArray array = parser.parse(jsonString).getAsJsonArray();
          for (JsonElement element : array) {
            JsonObject pluginInformation = element.getAsJsonObject();
            if (pluginInformation == null) {
              System.out.println("PLUGIN NULL");
              continue;
            }
            String id = pluginInformation.getAsJsonObject().get("id").getAsString();
            String name = pluginInformation.getAsJsonObject().get("name").getAsString();
            String fileType;
            JsonElement fileJsonObject = pluginInformation.getAsJsonObject().get("file");
            if (fileJsonObject == null) {
              fileType = ".jar";
            } else {
              fileType = pluginInformation.getAsJsonObject().get("file").getAsJsonObject().get("type")
               .getAsString();
            }
            if (!fileType.equals("external")) {
              System.out.println("Downloading " + name + "(" + id + ")");
              File file = new File(
               "data/plugins/" + name.replaceAll("[^a-zA-Z]", "") + "(" + id + ")" + fileType);
              if (!file.exists()) {
                file.getParentFile().mkdirs();
                file.createNewFile();
              }
              download(id, file);
              System.out.println("Downloaded " + name + "(" + id + ")");
            }
          }
        } catch (IOException e) {
          e.printStackTrace();
        }
        System.out.println("Downloading a new spiget page");
        recursiveDownload("https://api.spiget.org/v2/resources?size=10&page=", currentPage + 1);
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  private void download(String resourceID, File output) {
    try {
      URL url = new URL("http://aqua.api.spiget.org/v2/resources/" + resourceID + "/download");
      HttpURLConnection conn = (HttpURLConnection) url.openConnection();
      conn.setRequestProperty("User-Agent", "Optic_Fusion1 Antimalware");
      conn.setRequestMethod("GET");

      InputStream in = conn.getInputStream();
      FileOutputStream out = new FileOutputStream(output);
      byte[] b = new byte[1024];
      int n = in.read(b);
      while (n != -1) {
        out.write(b, 0, n);
        n = in.read(b);
      }
      out.close();
      in.close();
    } catch (IOException e) {
      output.delete();
    }
  }

  @Override
  public String getDescription() {
    return "Recursively downloads every spigot plugin (Currently doesn't work)";
  }

}
