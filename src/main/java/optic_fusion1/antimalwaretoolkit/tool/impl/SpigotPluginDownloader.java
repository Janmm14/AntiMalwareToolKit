package optic_fusion1.antimalwaretoolkit.tool.impl;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.apache.commons.io.IOUtils;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class SpigotPluginDownloader extends Tool {

    @Override
    public void run(String[] args) {
        int startingPage = 0;
        if(args.length == 1) {
            try {
                startingPage = Integer.parseInt(args[0]);
            } catch (NumberFormatException ignored) {
            }
        }

        System.out.println("Starting downloader");
        for (int page = startingPage; page < Integer.MAX_VALUE; page++) {
            System.out.println("Downloading a new spiget page");
            boolean success = recursiveDownload("https://api.spiget.org/v2/resources?size=10&page=", page);
            if (!success) {
                break;
            }
        }

        File[] files = new File("data/plugins").listFiles();
        for (File file : files) {
            BufferedReader br = null;
            try {
                br = new BufferedReader(new FileReader(file.toString()));
                if (br.readLine() == null) {
                    file.delete();
                }
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    br.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }

        System.out.println("Done");
    }

    private boolean recursiveDownload(String url, int currentPage) {
        String urlString = url + currentPage;
        System.out.println("Downloading the current page: " + urlString);
        try {
            String jsonString = IOUtils.toString(new URL(urlString), "UTF-8");
            if (jsonString.isEmpty() || jsonString.equalsIgnoreCase("[]")) {
                System.out.println("Max page reached");
                return false;
            } else {
                try {
                    JsonParser parser = new JsonParser();
                    JsonArray array = parser.parse(jsonString).getAsJsonArray();
                    for (JsonElement element : array) {
                        JsonObject pluginInformation = element.getAsJsonObject();
                        if (pluginInformation == null) {
                            System.out.println("PLUGIN NULL");
                            continue;
                        }
                        String id = pluginInformation.getAsJsonObject().get("id").getAsString();
                        String name = pluginInformation.getAsJsonObject().get("name").getAsString();
                        String fileType;
                        JsonElement fileJsonObject = pluginInformation.getAsJsonObject().get("file");
                        if (fileJsonObject == null) {
                            fileType = ".jar";
                        } else {
                            fileType = pluginInformation.getAsJsonObject().get("file").getAsJsonObject().get("type")
                                    .getAsString();
                        }
                        if (!fileType.equals("external")) {
                            System.out.println("Downloading " + name + "(" + id + ")");
                            File file = new File(
                                    "data/plugins/" + name.replaceAll("[^a-zA-Z]", "") + "(" + id + ")" + fileType);
                            if (!file.exists()) {
                                file.getParentFile().mkdirs();
                                file.createNewFile();
                            }
                            download(id, file);
                            System.out.println("Downloaded " + name + "(" + id + ")");
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    return false;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    private void download(String resourceID, File output) {
        try {
            URL url = new URL("http://aqua.api.spiget.org/v2/resources/" + resourceID + "/download");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestProperty("User-Agent", "Optic_Fusion1 Antimalware");
            conn.setRequestMethod("GET");

            InputStream in = conn.getInputStream();
            FileOutputStream out = new FileOutputStream(output);
            byte[] b = new byte[1024];
            int n = in.read(b);
            while (n != -1) {
                out.write(b, 0, n);
                n = in.read(b);
            }
            out.close();
            in.close();
        } catch (IOException e) {
            output.delete();
        }
    }

    @Override
    public String getDescription() {
        return "Recursively downloads every spigot plugin (Currently doesn't work)";
    }

}
