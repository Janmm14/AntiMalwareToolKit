package optic_fusion1.antimalwaretoolkit.tool.impl;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Multimap;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.nio.file.attribute.FileTime;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import org.apache.commons.io.IOUtils;

import static optic_fusion1.antimalwaretoolkit.Main.log;

public class SpigotPluginDownloader extends Tool {
  
  private static final int threadCount = Integer.getInteger("downloader.threadcount", 4);

  @Override
  public void run(List<String> args) {
    int startingPage = 0;
    int pageCount = 10;
    String url = "https://api.spiget.org/v2/resources/free?size=10&page=";
    if (args.size() >= 1) {
      if (args.get(0).equalsIgnoreCase("latest")) {
        url = "https://api.spiget.org/v2/resources/free?size=10&sort=-updateDate&fields=file,name,version,updateDate,releaseDate&page=";
        if (args.size() >= 2) {
          startingPage = Integer.parseInt(args.get(1));
          if (args.size() >= 3) {
            pageCount = Integer.parseInt(args.get(2));
          }
        }
      } else {
        startingPage = Integer.parseInt(args.get(0));
      }
    }
    File dlFolder = new File("data/plugins");
    dlFolder.mkdirs();
    File oldFolder = new File("data/old");
    oldFolder.mkdirs();
    Multimap<String, String> files = HashMultimap.create(1000, 1);
    for (String fileName : dlFolder.list()) {
      String[] split = fileName.split("_lastUpdate");
      if (split.length != 2) {
        log("Unknown file " + fileName + ", ignoring...");
        continue;
      }
      files.put(split[0], split[1]);
    }
    log("Found " + files.size() + " existing files, " + files.keySet().size() + " distinct plugins");
    log("Starting downloader");
    ExecutorService executor = Executors.newFixedThreadPool(threadCount);
    int maxPage = startingPage + pageCount;
    for (int page = startingPage; page < maxPage; page++) {
      log("Scheduling spiget page " + page);
      String urlFinal = url;
      int pageFinal = page;
      executor.submit(() -> {
        log("Downloading spiget page " + pageFinal);
        downloadPage(dlFolder, oldFolder, urlFinal, pageFinal, files);
      });
    }
    executor.shutdown();
    while (!executor.isTerminated()) {
      try {
        if (executor.awaitTermination(1, TimeUnit.MINUTES)) {
          if (executor.isTerminated()) {
            break;
          }
        }
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
    log("Done, downloaded spiget pages " + startingPage + " to " + maxPage);
  }

  private boolean downloadPage(File dlFolder, File oldFolder, String baseUrl, int currentPage, Multimap<String, String> existing) {
    String urlString = baseUrl + currentPage;
    log("Downloading the page: " + urlString);
    String jsonString = "";
    try {
      jsonString = downloadToString(urlString);
    } catch (IOException ex) {
      Logger.getLogger(SpigotPluginDownloader.class.getName()).log(Level.SEVERE, null, ex);
    }
    if (jsonString.isEmpty() || jsonString.equalsIgnoreCase("[]")) {
      log("Max page reached");
      return false;
    }
    for (JsonElement element : JsonParser.parseString(jsonString).getAsJsonArray()) {
      JsonObject jsonObject = element.getAsJsonObject();
      if (jsonObject == null) {
        log("Found a null plugin");
        continue;
      }
      JsonObject pluginInformation = jsonObject.getAsJsonObject();
      JsonObject pluginFileInformation = pluginInformation.getAsJsonObject("file");
      
      String fileType = pluginFileInformation == null ? ".jar" : pluginFileInformation.get("type").getAsString();
      
      String id = pluginInformation.get("id").getAsString().replaceAll("\\.", "");
      String name = pluginInformation.get("name").getAsString();
      
      if (fileType.equals("external")) {
        log("Skipping external file: id: " + id + " name: " + name);
        continue;
      } else if (fileType.equals(".skript") || fileType.equals(".sk")) {
        log("Skipping skript id: " + id + " name: " + name);
        continue;
      }
      double fileSize = 0;
      try {
        fileSize = pluginFileInformation.get("size").getAsDouble();
      } catch (NullPointerException e) {
        continue;
      }
      if (fileSize == 0) {
        continue;
      }
      long updateDate = pluginInformation.get("updateDate").getAsLong();
      long releaseDate = pluginInformation.get("releaseDate").getAsLong();
      String lastUpdateStr = "_lastUpdate(" + updateDate + ")";
      log("Downloading " + name + "_id(" + id + ")" + lastUpdateStr);
      String fileNamePart1 = name.replaceAll("[^a-zA-Z0-9]", "") + "_id(" + id + ")";
      String fileNamePart2 = lastUpdateStr + fileType;
      Collection<String> exist = existing.get(fileNamePart1);
      if (!exist.isEmpty()) {
        for (String s : exist) {
          if (!fileNamePart2.equals(s)) {
            try {
              Files.move(
                  new File(dlFolder, fileNamePart1 + s).toPath(),
                  new File(oldFolder, fileNamePart1 + s).toPath(),
                  StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.COPY_ATTRIBUTES,
                  StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
              e.printStackTrace();
            }
          }
        }
      }

      String fileName = fileNamePart1 + fileNamePart2;
      File output = new File(dlFolder, fileName);
      if (!output.exists()) {
        download(id, output, releaseDate, updateDate);
        log("Downloaded " + name + " id: " + id + ", File Type: " + fileType);
        log("  Output: " + fileName);
      } else {
        log("No new update for " + fileName);
      }
    }
    return true;
  }

  private void download(String resourceID, File output, long releaseDate, long updateDate) {
    try {
      URL url = new URL("https://api.spiget.org/v2/resources/" + resourceID + "/download");
      HttpURLConnection conn = (HttpURLConnection) url.openConnection();
      conn.setInstanceFollowRedirects(true);
      conn.setRequestProperty("User-Agent", "Optic_Fusion1 AntimalwareToolkit");
      conn.setRequestMethod("GET");
      int responseCode = conn.getResponseCode();
      if (responseCode == 307) {
        String location = conn.getHeaderField("Location");
        if (location == null) {
          log("Redirect without location for url: " + url.getPath());
        } else {
          log("Redirected to : " + location);
          url = new URL(location);
          conn = (HttpURLConnection) url.openConnection();
          conn.setInstanceFollowRedirects(true);
          conn.setRequestProperty("User-Agent", "Optic_Fusion1 AntimalwareToolkit");
          conn.setRequestMethod("GET");
        }
      } else if (responseCode != 200) {
        log("Response code was " + responseCode + " for resource " + resourceID);
      }

      InputStream inputStream = conn.getInputStream();
      FileOutputStream fileOutputStream = new FileOutputStream(output);
      IOUtils.copy(inputStream, fileOutputStream);
      try {
        IOUtils.close(fileOutputStream);
      } catch (Exception ex) {
        System.err.println("Close error 1 for " + resourceID);
        ex.printStackTrace();
      }
      
      Path outputPath = output.toPath();
      Files.setAttribute(outputPath, "creationTime", FileTime.from(releaseDate, TimeUnit.SECONDS));
      Files.setLastModifiedTime(outputPath, FileTime.from(updateDate, TimeUnit.SECONDS));
      try {
        IOUtils.close(inputStream);
      } catch (Exception ex) {
        System.err.println("Close error 2 for " + resourceID);
        ex.printStackTrace();
      }
      try {
        IOUtils.close(conn);
      } catch (Exception ex) {
        System.err.println("Close error 3 for " + resourceID);
        ex.printStackTrace();
      }
    } catch (Exception ex) {
      System.err.println("Could not download resource " + resourceID);
      ex.printStackTrace();
      output.delete();
    }
  }

  @Override
  public String getDescription() {
    return "Downloads every spigot plugin";
  }

  private String downloadToString(String urlString) throws IOException {
    URL url = new URL(urlString);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.addRequestProperty("User-Agent", "Optic_Fusion1 AntimalwareToolkit");
    return IOUtils.toString(conn.getInputStream(), StandardCharsets.UTF_8);
  }

}
