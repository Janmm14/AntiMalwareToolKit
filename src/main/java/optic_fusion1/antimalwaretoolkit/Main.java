package optic_fusion1.antimalwaretoolkit;

import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import optic_fusion1.antimalwaretoolkit.database.Database;
import optic_fusion1.antimalwaretoolkit.tool.Tool;
import optic_fusion1.antimalwaretoolkit.tool.impl.ChangeAccess;
import optic_fusion1.antimalwaretoolkit.tool.impl.Cleanup;
import optic_fusion1.antimalwaretoolkit.tool.impl.CleanupInvalidFiles;
import optic_fusion1.antimalwaretoolkit.tool.impl.DatabaseMigration;
import optic_fusion1.antimalwaretoolkit.tool.impl.ListFiles;
import optic_fusion1.antimalwaretoolkit.tool.impl.MethodNamePrinter;
import optic_fusion1.antimalwaretoolkit.tool.impl.PlayerPrinter;
import optic_fusion1.antimalwaretoolkit.tool.impl.PluginAnalyzer;
import optic_fusion1.antimalwaretoolkit.tool.impl.SortJars;
import optic_fusion1.antimalwaretoolkit.tool.impl.SpigotPluginDownloader;
import optic_fusion1.antimalwaretoolkit.tool.impl.StringPrinter;
import optic_fusion1.antimalwaretoolkit.tool.impl.UpdateDatabase;
import optic_fusion1.faith.util.shellparser.ParseException;
import optic_fusion1.faith.util.shellparser.ShellParser;

public class Main {

  private HashMap<String, Tool> tools = new HashMap<>();
  private boolean isRunning;
  private Scanner scanner = new Scanner(System.in);
  public static final Database DATABASE = new Database();

  public static void main(String[] args) {
    new Main().main();
  }

  private void addTools() {
    tools.put("methodnameprinter", new MethodNamePrinter());
    tools.put("changeaccess", new ChangeAccess());
    tools.put("stringprinter", new StringPrinter());
    tools.put("cleanupinvalidfiles", new CleanupInvalidFiles());
    tools.put("cleanup", new Cleanup());
    tools.put("updatedatabase", new UpdateDatabase());
    tools.put("spigotplugindownloader", new SpigotPluginDownloader());
    tools.put("listfiles", new ListFiles());
    tools.put("sortjars", new SortJars());
    tools.put("pluginanalyzer", new PluginAnalyzer());
    tools.put("databasemigration", new DatabaseMigration());
    tools.put("playerprinter", new PlayerPrinter());
  }

  private void main() {
    isRunning = true;
    addTools();
    System.out.println("Finished loading, run a tool");
    while (isRunning) {
      try {
        List<String> args = ShellParser.parseString(scanner.nextLine());
        if (args.isEmpty()) {
          continue;
        }
        Tool tool = tools.get(args.get(0));
        if (tool == null) {
          System.out.println(args.get(0) + " is not a valid tool");
          continue;
        }
        if (args.size() == 2 && args.get(1).equals("?")) {
          System.out.println(tool.getDescription());
          continue;
        }
        args.remove(0);
        tool.run(args);
      } catch (ParseException ex) {
        ex.printStackTrace();
      }
    }
  }

}
